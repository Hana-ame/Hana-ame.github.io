{"version":3,"file":"static/js/89.6ae2bebf.chunk.js","mappings":"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","sources":["Tools/Proxy/ProxyFetch.ts","bilicover/ImagePreview.js","bilicover/BV.js","bilicover/Live.js","bilicover/B23.js","bilicover/BiliCover.js"],"sourcesContent":["export default class ProxyFetch {\n    private endpoint: string;\n\n    constructor(endpoint: string) {\n        this.endpoint = endpoint;\n    }\n\n    async fetch(input: string | URL, init?: RequestInit): Promise<Response> {\n        const originalUrl = new URL(input);\n\n        // 构建新的目标URL：使用https协议和指定的endpoint\n        const targetUrl = new URL(originalUrl);\n        targetUrl.protocol = 'https:';\n        targetUrl.host = this.endpoint;\n\n        // 准备请求配置\n        const requestInit: RequestInit = { ...init };\n\n        // 处理headers\n        const headers = new Headers(requestInit.headers);\n        headers.set('X-Host', originalUrl.hostname);\n        headers.set('X-Scheme', originalUrl.protocol.slice(0, -1)); // 移除末尾的冒号\n\n        requestInit.headers = headers;\n\n        return fetch(targetUrl.toString(), requestInit);\n    }\n}","import React, { useState } from 'react';\n\nconst ImagePreview = ({ imageUrl, text }) => {\n    const [copyMessage, setCopyMessage] = useState(\"\");\n    // 新增状态：用于显示发送到月岛的操作消息\n    const [moonchanMessage, setMoonchanMessage] = useState(\"\");\n\n    const copyImageUrl = () => {\n        // 注意：这里保留了您原始代码中的 .replace(/^https:/, 'http:') 和 \"\\n\"\n        // 复制时将 https 替换为 http，并添加换行符\n        navigator.clipboard.writeText(imageUrl.replace(/^https:/, 'http:') + \"\\n\")\n            .then(() => {\n                setCopyMessage(\"图片地址已复制: \" + imageUrl.replace(/^https:/, 'http:'));\n                setTimeout(() => setCopyMessage(\"\"), 3000); // 3秒后清除消息\n            })\n            .catch(err => {\n                console.error(\"复制失败:\", err);\n                setCopyMessage(\"复制失败，请重试\");\n                setTimeout(() => setCopyMessage(\"\"), 3000); // 3秒后清除消息\n            });\n    };\n\n    const sendToMoonchan = async () => {\n        setMoonchanMessage(\"发送中...\"); // 显示加载状态\n\n        const url = \"https://moonchan.xyz/api/v2/?bid=104&tid=135803\";\n        const headers = {\n            \"Content-Type\": \"application/json\" // 指定请求体是 JSON 格式\n        };\n\n        // 将 imageUrl 和 text 作为 JSON 数据发送\n        const body = JSON.stringify({\n            p: imageUrl.replace(/^https:/, 'http:'), // 使用原始的 imageUrl prop\n            txt: text // 使用原始的 text prop\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: \"POST\", // 使用 POST 方法\n                credentials: 'include',\n                headers: headers,\n                body: body\n            });\n\n            if (response.ok) {\n                // 请求成功\n                // 如果API有返回JSON数据，可以解析并使用：\n                // const data = await response.json();\n                setMoonchanMessage(\"发送成功！\");\n                setTimeout(() => setMoonchanMessage(\"\"), 3000);\n            } else {\n                // 请求失败，获取错误信息\n                const errorText = await response.text();\n                console.error(\"发送到月岛失败响应:\", response.status, response.statusText, errorText);\n                setMoonchanMessage(`发送失败: ${response.status} ${response.statusText} - ${errorText.substring(0, 100)}...`); // 截取部分错误信息展示\n                setTimeout(() => setMoonchanMessage(\"\"), 5000); // 错误消息显示时间稍长\n            }\n\n            fetch(\"https://moonchan.xyz/api/v2/random?table=bilicover\", {\n                method: \"POST\",\n                credentials: 'include',\n                headers: headers,\n                body: imageUrl.replace(/^https:/, 'http:'),\n            })\n        } catch (error) {\n            // 网络错误或fetch本身失败\n            console.error(\"发送到月岛时发生错误:\", error);\n            setMoonchanMessage(`发送失败: ${error.message}`);\n            setTimeout(() => setMoonchanMessage(\"\"), 5000);\n        }\n    };\n\n    return (\n        <div className=\"flex items-center space-x-4\">\n            <img\n                src={imageUrl}\n                alt=\"预览\"\n                className=\"w-1/2 h-auto\"\n                referrerPolicy=\"no-referrer\" // 注意：这里是 referrerpolicy，不是 referrerpolicy\n            />\n            {/* 调整布局，使按钮和消息垂直排列 */}\n            <div className=\"flex flex-col space-y-4\">\n                {/* 复制图片地址部分 */}\n                <div>\n                    <button\n                        onClick={copyImageUrl}\n                        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                    >\n                        复制图片地址\n                    </button>\n                    {copyMessage && (\n                        <p className=\"mt-2 text-green-500\">{copyMessage}</p>\n                    )}\n                </div>\n\n                {/* 发送到月岛部分 */}\n                <div>\n                    <button\n                        onClick={sendToMoonchan}\n                        className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\"\n                    >\n                        发送到月岛\n                    </button>\n                    {moonchanMessage && (\n                        // 根据消息类型（成功/失败）显示不同颜色\n                        <p className={`mt-2 ${moonchanMessage.includes('失败') ? 'text-red-500' : 'text-green-500'}`}>\n                            {moonchanMessage}\n                        </p>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ImagePreview;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils'\nimport ProxyFetch from '@/Tools/Proxy/ProxyFetch.ts'\nimport ImagePreview from './ImagePreview';\n\nconst BV = ({ id, text }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await (new ProxyFetch(\"ex.moonchan.xyz\")).fetch(\n                    `https://apiv2.magecorn.com/bilicover/get?type=bv&id=${id}&client=2.6.0`, \n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok'+response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 url 属性，抛出错误\n                if (!jsonData || !jsonData.url) {\n                    throw new Error(\"结果中未找到 'url' 属性\");\n                }\n\n                setData(jsonData.url);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <ImagePreview imageUrl={data} text={text} />\n    );\n};\n\nexport default BV;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils'\nimport ProxyFetch from '@/Tools/Proxy/ProxyFetch.ts'\nimport ImagePreview from './ImagePreview';\n\nconst Live = ({ id, text }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await (new ProxyFetch(\"ex.moonchan.xyz\")).fetch(\n                    `https://apiv2.magecorn.com/bilicover/get?type=live&id=${id}&client=2.6.0`, \n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok'+response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 url 属性，抛出错误\n                if (!jsonData || !jsonData.url) {\n                    throw new Error(\"结果中未找到 'url' 属性\");\n                }\n\n                setData(jsonData.url);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <ImagePreview imageUrl={data} text={text} />\n    );\n};\n\nexport default Live;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils';\nimport ProxyFetch from '@/Tools/Proxy/ProxyFetch.ts';\nimport BV from './BV';\nimport Live from './Live';\n\nconst B23 = ({ id, text }) => {\n    const [bv, setBV] = useState(null);\n    const [live, setLive] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await (new ProxyFetch(\"ex.moonchan.xyz\")).fetch(\n                    `https://apiv2.magecorn.com/bilicover/get?type=b23&id=${id}&client=2.6.0`,\n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok' + response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 result 属性，抛出错误\n                if (!jsonData || !jsonData.result) {\n                    throw new Error(\"结果中未找到 'result' 属性\");\n                }\n                const urlString = jsonData.result;\n\n                // 创建 URL 对象\n                const url = new URL(urlString);\n\n                // 获取 pathname\n                // const pathname = url.pathname; // 结果是 '/video/BV12s1mYcEJW'\n\n                // 提取 'video/' 之后的部分\n                const bv = url.pathname.split('/video/')[1]; // 结果是 'BV12s1mYcEJW'\n                const live = url.pathname.split('/')[1];\n\n                setBV(bv);\n                setLive(live);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        bv ? <BV id={bv} text={text} /> : <Live id={live} text={text} />\n\n    );\n};\n\nexport default B23;","import React, { useEffect, useState } from 'react';\nimport B23 from \"./B23\";\nimport BV from \"./BV\";\nimport Live from './Live';\n\nimport { Main } from \"../App\"\nimport Nav from '../Nav';\n\nconst BiliCover = () => {\n    const [url, setUrl] = useState(\"\");\n    const [b23id, setB23id] = useState(\"\");\n    const [bvid, setBvid] = useState(\"\");\n    const [liveid, setLiveid] = useState(\"\");\n\n    const extractIds = (url) => {\n        const b23Regex = /https?:\\/\\/(?:www\\.)?b23\\.tv\\/(\\w+)/;\n        const bvidRegex = /https?:\\/\\/(?:www\\.)?bilibili\\.com\\/video\\/(\\w+)/;\n        const liveRegex = /https?:\\/\\/live\\.bilibili\\.com\\/(\\w+)/;\n\n        const b23Match = url.match(b23Regex);\n        const bvidMatch = url.match(bvidRegex);\n        const liveMatch = url.match(liveRegex);\n\n        setB23id(b23Match ? b23Match[1] : \"\");\n        setBvid(bvidMatch ? bvidMatch[1] : \"\");\n        setLiveid(liveMatch ? liveMatch[1] : \"\");\n    };\n\n    const handleChange = (e) => {\n        const newUrl = e.target.value; // 获取输入的 URL\n        setUrl(newUrl); // 更新输入框的 URL\n        extractIds(newUrl); // 提取 ID\n    };\n\n    const handlePaste = (event) => {\n        // 阻止默认事件\n        event.preventDefault();\n        // 获取剪贴板内容\n        const clipboardData = event.clipboardData || window.clipboardData;\n        const pastedData = clipboardData.getData('Text'); // 获取文本\n\n        setUrl(pastedData); // 更新输入框的 URL\n        extractIds(pastedData); // 提取 ID\n    };\n\n    const handleMouseEnter = (event) => {\n        // 在鼠标悬停时全选内容\n        event.target.select();\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault(); // 阻止默认行为\n        const data = event.dataTransfer.getData('text'); // 获取拖拽的数据\n        setUrl(data); // 将拖拽的内容设置到输入框中\n        extractIds(data); // 提取 ID\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault(); // 阻止默认行为，以允许 drop 事件\n    };\n\n\n    useEffect(() => {\n        // 添加粘贴事件监听器\n        window.addEventListener('paste', handlePaste);\n\n        // 清理事件监听器\n        return () => {\n            window.removeEventListener('paste', handlePaste);\n        };\n    });\n\n    return (\n        <Main><Nav />\n            <div className='h-full'\n                onDrop={handleDrop} // 绑定 drop 事件\n                onDragOver={handleDragOver} // 绑定 dragOver 事件\n            >\n                <input\n                    type=\"text\"\n                    value={url}\n                    onChange={handleChange}\n                    onMouseEnter={handleMouseEnter} // 绑定鼠标悬停事件\n\n                    placeholder=\"输入 URL, 或者直接按 Ctrl+V, 或者拖动连接到此页面\"\n                    style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n                />\n                {b23id && <B23 id={b23id} text={url} />}\n                {bvid && <BV id={bvid} text={url} />}\n                {liveid && <Live id={liveid} text={url} />}\n                <div>后端支持(无断):<a className=\"text-blue-500 hover:text-green-500 underline\" href=\"https://bilicover.magecorn.com/help\">https://bilicover.magecorn.com/help</a></div>\n            </div>\n        </Main>\n    );\n};\n\nexport default BiliCover;"],"names":["ProxyFetch","constructor","endpoint","this","fetch","input","init","originalUrl","URL","targetUrl","protocol","host","requestInit","headers","Headers","set","hostname","slice","toString","_ref","imageUrl","text","copyMessage","setCopyMessage","useState","moonchanMessage","setMoonchanMessage","_jsxs","className","children","_jsx","src","alt","referrerPolicy","onClick","copyImageUrl","navigator","clipboard","writeText","replace","then","setTimeout","catch","err","console","error","async","body","JSON","stringify","p","txt","response","method","credentials","ok","errorText","status","statusText","substring","message","includes","id","data","setData","loading","setLoading","setError","useEffect","Error","jsonData","json","url","fetchData","ImagePreview","bv","setBV","live","setLive","result","urlString","pathname","split","BV","Live","BiliCover","setUrl","b23id","setB23id","bvid","setBvid","liveid","setLiveid","extractIds","b23Match","match","bvidMatch","liveMatch","handlePaste","event","preventDefault","pastedData","clipboardData","window","getData","addEventListener","removeEventListener","Main","Nav","onDrop","dataTransfer","onDragOver","type","value","onChange","e","newUrl","target","onMouseEnter","select","placeholder","style","width","padding","marginBottom","B23","href"],"sourceRoot":""}